<div id="a1"> <h1>全局 API</h1> </div> <div id="a2"> <h2>Vue.extend</h2> <p>使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p> <p>data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数</p> <pre><code class="lang-">// 创建构造器 var Profile = Vue.extend({ template: '&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p&gt;', data: function () { return { firstName: 'Walter', lastName: 'White', alias: 'Heisenberg' } } }) // 创建 Profile 实例，并挂载到一个元素上。 new Profile().$mount('#mount-point') </code></pre> </div> <div id="a3"> <h2>Vue.nextTick</h2> <p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p> <pre><code class="lang-">// 修改数据 vm.msg = 'Hello' // DOM 还没有更新 Vue.nextTick(function () { // DOM 更新了 }) // 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示) Vue.nextTick() .then(function () { // DOM 更新了 }) </code></pre> </div> <div id="a4"> <h2>Vue.set</h2> <p>设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。</p> <pre><code class="lang-">注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。 </code></pre> </div> <div id="a5"> <h1>全局配置</h1> </div> <div id="a6"> <h2>silent</h2> <p>默认值：false</p> <pre><code class="lang-">Vue.config.silent = true </code></pre> </div> <div id="a7"> <h2>devtools</h2> <p>默认值：true (生产版为 false)</p> <pre><code class="lang-">// 务必在加载 Vue 之后，立即同步设置以下内容 Vue.config.devtools = true </code></pre> </div> <div id="a8"> <h2>errorHandler</h2> <p>默认值：undefined</p> <pre><code class="lang-">Vue.config.errorHandler = function (err, vm, info) { // handle error // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子 // 只在 2.2.0+ 可用 } </code></pre> </div>